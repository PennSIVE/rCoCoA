% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_data.R
\name{sim_xy2_mvn}
\alias{sim_xy2_mvn}
\title{Simulate multivariate normal data in CoCoA model}
\usage{
sim_xy2_mvn(
  theta0,
  dat_zt0,
  mu_x = 0,
  mu_y = 0,
  sd_x = 1,
  sd_y = 1,
  cor_link = "tanh"
)
}
\arguments{
\item{theta0}{numeric vector of true parameters}

\item{dat_zt0}{data.frame containing observations of Z and T}

\item{mu_x}{mean of X}

\item{mu_y}{means of Y}

\item{sd_x}{standard deviation of X}

\item{sd_y}{standard deviation of Y}

\item{cor_link}{character vector corresponding to the correlation link function (default = "tanh")}
}
\value{
Generated X and Y values based on the multivariate Gaussian model.
}
\description{
Simulate multivariate normal (X,Y) given observations of (Z,T) and the multivariate Gaussian CoCoA model.
}
\details{
Given \eqn{n} observations of Z and T, generate X and Y according to the model \deqn{Corr(X,Y) = g^{-1}(\alpha + \beta Z + \gamma T + ...)}
where \eqn{(X,Y)} follow a multivariate normal distribution with means \code{mu_x, mu_y} and standard deviations \code{sd_x, sd_y}. The inverse link function \eqn{g^{-1}}
allows for unconstrained parameter estimation while ensuring that the predicted correlation is bounded.
}
\examples{
T = as.numeric(purrr::rbernoulli(n = 100, p = 0.5))
Z = rep(NA, times = 100)
for (i in 1:100){
Z[i] <- if (T[i] == 1){
# Z|T=1 ~ Bernoulli(0.3)
as.numeric(purrr::rbernoulli(n = 1, p = 0.3))
} else {
# Z|T=0 ~ Bernoulli(0.9)
as.numeric(purrr::rbernoulli(n = 1, p = 0.9))
}
}
dat_zt0 <- data.frame(Z = Z, T = T, ZT = Z*T)
XY = sim_xy2_mvn(theta0 = c(0, 0, 0, 0), dat_zt0 = dat_zt0,
mu_x = 1, mu_y = 1, sd_x = 1, sd_y = 2, cor_link = "tanh")


}
