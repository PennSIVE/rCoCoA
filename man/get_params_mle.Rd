% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimator_mle.R
\name{get_params_mle}
\alias{get_params_mle}
\title{Maximum likelihood estimation of CoCoA model parameters}
\usage{
get_params_mle(dat_xyz, rescale_zt = FALSE)
}
\arguments{
\item{dat_xyz}{a data frame containing the columns X, Y, Z, T, ... in that order}

\item{rescale_zt}{a logical value indicating if the conditional correlation model covariates Z, T, ... should be rescaled (z-scored)}
}
\value{
A list containing \code{params}, a numeric matrix of the estimated parameters, \code{out2}, a table of the estimated parameters,
and \code{runtime}, the runtime of the optimization routine.
}
\description{
Estimate CoCoA model parameters using the maximum likelihood estimator and the multivariate
normal likelihood.
}
\details{
Given \eqn{n} observations of Z and T, X and Y are bivariate normal with
means \code{mu_x, mu_y}, standard deviations \code{sd_x, sd_y}, and correlation
\deqn{Corr(X,Y) = g^{-1}(\alpha + \beta Z + \gamma T + ...).} The inverse link function \eqn{g^{-1}}
allows for unconstrained parameter estimation while ensuring that the predicted correlation is bounded.
Currently, only the \code{tanh} link is implemented.
}
\examples{
T = as.numeric(purrr::rbernoulli(n = 100, p = 0.5))
Z = rep(NA, times = 100)
for (i in 1:100){
Z[i] <- if (T[i] == 1){
# Z|T=1 ~ Bernoulli(0.3)
as.numeric(purrr::rbernoulli(n = 1, p = 0.3))
} else {
# Z|T=0 ~ Bernoulli(0.9)
as.numeric(purrr::rbernoulli(n = 1, p = 0.9))
}
}
dat_zt0 <- data.frame(Z = Z, T = T, ZT = Z*T)
XY = sim_xy2_mvn(theta0 = c(0, 0, 0, 0), dat_zt0 = dat_zt0,
mu_x = 1, mu_y = 1, sd_x = 1, sd_y = 2, cor_link = "tanh")
dat_xyz = data.frame(X = XY$x, Y = XY$y)
dat_xyz = cbind(dat_xyz, dat_zt0)
get_params_mle(dat_xyz)

}
